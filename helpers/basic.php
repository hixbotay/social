<?phpini_set('memory_limit', '-1');ini_set('max_execution_time', 90);
function debug($value, $label = null)
{	echo '<pre>';	print_r($value);	echo '</pre>';	die;
	$label = JBDebug::get_tracelog(debug_backtrace(), $label);
	echo JBDebug::getdebug($value, $label);
}function write_log($log_file, $error, $type = E_USER_NOTICE){	date_default_timezone_set('Asia/Ho_Chi_Minh');	$date = date('d/m/Y H:i:s');	$error = $date.": ".$error."\n";	$log_file = JPATH_ROOT."/logs/".$log_file;	if(!file_exists($log_file) || filesize($log_file) > 1048576){		$fh = fopen($log_file, 'w');	}	else{		//echo "Append log to log file ".$log_file;		$fh = fopen($log_file, 'a');	}	fwrite($fh, $error);	fclose($fh);}
class JBDebug{	static function getdebug($value, $label = null)		{			$value = htmlentities(print_r($value, true));			return "<pre>$label$value</pre>";		}				static function trace()		{			$trace = debug_backtrace();			foreach ($trace as $k => $t)			{				if (!isset($_GET['object'])) $trace[$k]['object'] = null;				if (!isset($_GET['args'])) $trace[$k]['args'] = null;			}			debug($trace);			exit_app();		}				static function using($class)		{			if (!including(FileHandler::GetNameFromClass($class)))				throw new UsingFailedException($class);		}				static function including($file_name)		{			try			{				$path = FileHandler::GetUsingPath($file_name);				if ($path)				{					require_once($path);					return true;				}				else					return require_file(AppConfig::GetInstance()->USING_DIRS, $file_name);			}			catch (Exception $ex)			{				debug('Uncaught exception: '.$ex->getMessage()."\n".$ex->getTraceAsString());				return false;			}		}				static function require_file($paths, $file_name)		{			foreach($paths as $path)			{				$file = $path.DS.$file_name;				if (file_exists($file))				{					require_once($file);					FileHandler::SaveUsingPath($file_name, $file);					return true;				}				else if (file_exists($path) && is_dir($path))				{					$subs = FileHandler::GetSubDirs($path, true);					if (!empty($subs))						if (require_file($subs, $file_name))							return true;				}			}			return false;		}				static function __autoload($class)		{			using($class);		}				static function console($var, $label = null)		{			$label = self::get_tracelog(debug_backtrace(), $label);			Log::LogVariable($var, $label);		}				static function get_tracelog($trace, $label = null)		{		var_dump($trace);die;		$line = $trace[0]['line'];			$file = self::is_set($trace[1]['file']);			$func = $trace[1]['static function'];			$class = self::is_set($trace[1]['class']);			$log = "<span style='color:#FF3300'>-- $file - line:$line - $class-$func()</span><br/>";			if($label)				$log .= "<span style='color:#FF99CC'>$label</span> ";				return $log;		}				static function is_set(&$var, $substitute = null)		{			return isset($var) ? $var : $substitute;		}				static function exit_app($status = null)		{			MysqlAdapter::CloseAll();			exit($status);		}				static function dump($value, $label = null)		{			$label = self::get_tracelog(debug_backtrace(), $label);			$value = htmlentities(var_export($value, true));			echo "<pre>$label$value</pre>";		}				static function jb_array_get($array, $key)		{			return isset($array[$key]) ? $array[$key] : null;		}				}
